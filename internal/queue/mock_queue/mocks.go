// Code generated by MockGen. DO NOT EDIT.
// Source: internal/queue/queue.go
//
// Generated by this command:
//
//	mockgen -source=internal/queue/queue.go -destination=internal/queue/mocks.go
//

// Package mock_queue is a generated GoMock package.
package mock_queue

import (
	models "RadioLiberty/pkg/models"
	context "context"
	multipart "mime/multipart"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockQueuStorage is a mock of QueuStorage interface.
type MockQueuStorage struct {
	ctrl     *gomock.Controller
	recorder *MockQueuStorageMockRecorder
	isgomock struct{}
}

// MockQueuStorageMockRecorder is the mock recorder for MockQueuStorage.
type MockQueuStorageMockRecorder struct {
	mock *MockQueuStorage
}

// NewMockQueuStorage creates a new mock instance.
func NewMockQueuStorage(ctrl *gomock.Controller) *MockQueuStorage {
	mock := &MockQueuStorage{ctrl: ctrl}
	mock.recorder = &MockQueuStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueuStorage) EXPECT() *MockQueuStorageMockRecorder {
	return m.recorder
}

// AddToQueue mocks base method.
func (m *MockQueuStorage) AddToQueue(audio *models.AudioInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToQueue", audio)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToQueue indicates an expected call of AddToQueue.
func (mr *MockQueuStorageMockRecorder) AddToQueue(audio any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToQueue", reflect.TypeOf((*MockQueuStorage)(nil).AddToQueue), audio)
}

// Next mocks base method.
func (m *MockQueuStorage) Next() (*models.AudioInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*models.AudioInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockQueuStorageMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockQueuStorage)(nil).Next))
}

// MockAudioFilesStorage is a mock of AudioFilesStorage interface.
type MockAudioFilesStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAudioFilesStorageMockRecorder
	isgomock struct{}
}

// MockAudioFilesStorageMockRecorder is the mock recorder for MockAudioFilesStorage.
type MockAudioFilesStorageMockRecorder struct {
	mock *MockAudioFilesStorage
}

// NewMockAudioFilesStorage creates a new mock instance.
func NewMockAudioFilesStorage(ctrl *gomock.Controller) *MockAudioFilesStorage {
	mock := &MockAudioFilesStorage{ctrl: ctrl}
	mock.recorder = &MockAudioFilesStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAudioFilesStorage) EXPECT() *MockAudioFilesStorageMockRecorder {
	return m.recorder
}

// GetAudioFile mocks base method.
func (m *MockAudioFilesStorage) GetAudioFile(ctx context.Context, audioInfo *models.AudioInfo, removeFlag bool) (*models.AudioFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAudioFile", ctx, audioInfo, removeFlag)
	ret0, _ := ret[0].(*models.AudioFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAudioFile indicates an expected call of GetAudioFile.
func (mr *MockAudioFilesStorageMockRecorder) GetAudioFile(ctx, audioInfo, removeFlag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAudioFile", reflect.TypeOf((*MockAudioFilesStorage)(nil).GetAudioFile), ctx, audioInfo, removeFlag)
}

// PutObject mocks base method.
func (m *MockAudioFilesStorage) PutObject(ctx context.Context, file multipart.File, header *multipart.FileHeader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObject", ctx, file, header)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutObject indicates an expected call of PutObject.
func (mr *MockAudioFilesStorageMockRecorder) PutObject(ctx, file, header any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockAudioFilesStorage)(nil).PutObject), ctx, file, header)
}
